<apex:page controller="GBLite.GridController" showHeader="{!showHeader}" sidebar="{!showSidebar}" title="{!gridWindowTitle}" action="{!initPage}">
    <apex:outputText value="{!bodyStartTag}" escape="false" />
    <c:EmptyComponent rendered="{!NOT(ISNULL(customCSSBody))}">
        <style type="text/css">
            {!customCSSBody}
        </style>
    </c:EmptyComponent>
    <script type="text/javascript">var errorRecs = new Array(), updatedRecs = {}, insertedRecs = {};</script>
    <!--[if IE 8]>
        <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.GBLite__gb_resources, 'ie8-styles.css')}" />
    <![endif]-->
    <div class="gbAppPage gbPage {!IF(showHeader, '', 'gbNoHdr')} {!IF(isFilteringByParentId, 'fbp', '')} gb{!lang.langCode} {!IF(repeatParentHeader, '', 'gbNoRepeatParentHdr')} {!IF(compactView, 'compactView', '')}">
        <apex:outputPanel id="messageBlock"> 
	        <c:EmptyComponent rendered="{!errors.showErrorMessages}">
	            <div class="msgBox warningMsg" id="pageWarnings">
	                <div class="gbIconAlert"></div>
	                
	                <apex:repeat value="{!errors.errorMessagesMapEntries}" var="error">
	                    <c:EmptyComponent rendered="{!error.isRecordTypeError}">
	                        <div class="rMessages">
	                            <div class="bold">{!error.ErrorForRecIdMsg}</div>
	                            <apex:repeat value="{!error.messages}" var="message">
	                                <div class="msgDetail"><apex:outputText value="{!message}" escape="false"/></div>
	                            </apex:repeat>
	                            <script type="text/javascript">errorRecs.push('{!error.key}');</script>
	                        </div>
	                    </c:EmptyComponent>
	                    
	                    <c:EmptyComponent rendered="{!(!error.isRecordTypeError)}">
	                        <apex:repeat value="{!error.messages}" var="message">
	                            <div class="msgDetail"><apex:outputText value="{!message}" escape="false"/></div>
	                        </apex:repeat>
	                    </c:EmptyComponent>
	                </apex:repeat>
	                
	                <apex:repeat value="{!errors.apexWarningMessages}" var="error">
	                    <div class="msgDetail"><apex:outputText value="{!error.summary}" escape="true"/></div>
	                </apex:repeat>
	                
	                <div class="messageTime">{!currentDateTime}</div>
	            </div>
	        </c:EmptyComponent>
        </apex:outputPanel>

        <c:EmptyComponent rendered="{!errors.showInfoMessages}">
            <div class="msgBox infoMsg">
                <div class="gbIconCheckmark"></div>
            
                <apex:repeat value="{!errors.apexInfoMessages}" var="infoMsg">
                    <div class="msgDetail"><apex:outputText value="{!infoMsg.summary}" escape="true"/></div>
                </apex:repeat>
                
                <div class="messageTime">{!currentDateTime}</div>
            </div>
        </c:EmptyComponent>
        
        <div class="msgBox boxShadow loaderStatus" id="gridStatus">
            <div class="msgBody">
                <img src="{!URLFOR($Resource.gb_resources, 'images/orange_loader.gif')}" height="35" width="35" border="0"/>
                <span class="msgText"></span>
            </div>
        </div>
        
        <div class="msgBox warningMsg boxShadow" id="invalidFieldsWarning">
            <div class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></div>
            <div class="msgBody">{!lang.EnterRequiredDataMsg}</div>
        </div>
        
        <div class="msgBox warningMsg boxShadow" id="invalidOppProdFieldsWarning">
            <div class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></div>
            <div class="msgBody">{!lang.EnterSalesPriceOrTotalPriceMsg}</div>
        </div>
        
        <div class="msgBox descBox boxShadow">
            <div class="header">
                <span class="descTitle"></span>
                <span class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></span>
                <br clear="all"/>
            </div>
            <div class="descContent"></div>
            <input type="hidden" value="" id="rowId"/>
        </div>
    
        <c:EmptyComponent rendered="{!massUpdatesEnabled || massCreatesEnabled}">
            <div id="massUpdatesMsgBox" class="msgBox massUpdatesBox boxShadow">
                <div id="muResizeDiv">
                    <div class="header">
                        <span class="title massUpdateType">{!lang.MassUpdateLbl}</span>
                        <span class="title massCreateType">Mass Create</span>
                        <span class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></span>
                        <span class="helpSep">|</span>
                        <span class="muHelpLink">{!lang.HelpLbl}</span>
                        <br clear="all"/>
                    </div>
                    <div class="rlBorders">
                        <div id="massUpdateButtons">
                            <input type="button" id="massUpdateSelected" value="{!lang.ApplyToSelectedBtnLbl}" class="gbBtn massUpdateType"/>
                            <input type="button" id="massUpdateSelected" value="{!lang.ApplyToSelectedBtnLbl}" class="gbBtnDisabled massUpdateType none" disabled="disabled" />
                            <input type="button" id="massUpdateAll" value="{!lang.ApplyToAllBtnLbl}" class="gbBtn massUpdateType"/>
                            <input type="button" id="massUpdateAll" value="{!lang.ApplyToAllBtnLbl}" class="gbBtnDisabled massUpdateType none" disabled="disabled" />                           
                            <input type="button" id="clearAllMassUpdate" value="{!lang.ClearAllBtnLbl}" class="gbBtn massUpdateType"/>
                            <input type="button" id="clearAllMassUpdate" value="{!lang.ClearAllBtnLbl}" class="gbBtnDisabled massUpdateType none" disabled="disabled" />
                            <input type="button" id="expandAllMassUpdate" value="{!lang.ExpAllBtnLbl}" class="gbBtn toggleRecords massUpdateType none"/>
                            <input type="button" id="expandAllMassUpdate" value="{!lang.ExpAllBtnLbl}" class="eaMuDis hidden gbBtnDisabled massUpdateType none" disabled="disabled" />
                            <span class="massCreateInput massCreateType">Number of Records: </span>
                            <input type="number" id="massCreateNumber" class="massCreateType" />
                            <input type="button" id="massCreateParents" value="{!lang.MassCreateParentsBtnLbl}" class="gbBtn massCreateType"/>
                            <input type="button" id="massCreateParents" value="{!lang.MassCreateParentsBtnLbl}" class="gbBtnDisabled massCreateType none" disabled="disabled" />
                            <input type="button" id="massCreateRelated" value="{!lang.MassCreateReleatedBtnLbl}" class="gbBtn massCreateType"/>
                            <input type="button" id="massCreateRelated" value="{!lang.MassCreateReleatedBtnLbl}" class="gbBtnDisabled massCreateType none" disabled="disabled" />
                            &nbsp;&nbsp;<span class="none muLoading">{!lang.applyingTxt}</span>
                        </div>
                        
                        <div class="massUpdtContent">
                            <div id="massUpdateMsg" class="none"></div>
                            <div id="massUpdateHelp" class="none">
                                <div class="instr">
                                    <h3>{!lang.MassUpdateHelpLbl}</h3>
                                    <p>{!lang.MassUpdateHelp1}</p>
                                    <p><apex:outputText value="{!lang.MassUpdateHelp2}" escape="false"/></p>
                                    <p><apex:outputText value="{!lang.MassUpdateHelp3}" escape="false"/></p>
                                    <p><apex:outputText value="{!lang.MassUpdateHelp4}" escape="false"/></p>
                                    
                                </div>
                            </div>
                            <div id="massCreateHelp" class="none">
                                <div class="instr">
                                    <h3>Mass Create Help</h3>
                                    <p>Fill in the values for the fields you want to mass create in this widget. Once you click on a widget field, it will turn orange indicating that the field value will be used to mass create corresponding fields in the Grid. Click the "Clear" link next to the field to clear the widget field value and specify the field will not be mass created in the Grid.</p>
                                    <p><b>Create parent records</b> by specifying the number of records you want to create and clicking the Create Parents button (the name will have the parent object name). If you want to create related records with each new parent you're mass creating, just specify the values of the related records in the widget, and we'll create one of each for you.</p>
                                    <p><b>Create related records</b> by selecting parent records on the grid, specifying the number of records you want to create and clicking the Create Related button. In this case you only need to fill out the fields in the widget that you want Mass Created. You can create multiple different kinds of related records at the same time: e.g. Opportunities and Contacts.</p>
                                    <p>Finalize your changes by clicking the "Save" button on the Grid.</p>
                                </div>
                            </div>
                            <div id="massUpdatesContent"></div>
                        </div>
                    </div>
                </div>
            </div>
        </c:EmptyComponent>
        
        <apex:variable var="showCharts" value="{!hasCharts}" />
        <c:EmptyComponent rendered="{!showCharts}">
        	<div id="gridChart" class="chartContainer none"></div>
        </c:EmptyComponent>
        	
        <!-- using prependId true (default behavior) so that the inputFields get saved properly, if set to false the inputField values are not saved (e.g. textarea fields) -->
        <apex:form styleClass="gbForm {!IF(showReadOnly, 'gbro', '')}" rendered="{!isValidGrid}" prependId="true">
            <c:GridPageComponent parentGrid="{!parentGrid}" 
                saveReturnAction="{!saveAndReturn}" saveAction="{!save}" editGridDataAction="{!editGridData}" refreshGridDataAction="{!refreshGridData}" 
                deleteAction="{!deleteRows}" deleteAllAction="{!deleteAll}" deletesEnabled="{!deletesEnabled}" hasCreateableObjects="{!hasCreateableObjects}"
                renderDeleteAll="{!renderDeleteAll}" noDeleteAccess="{!noDeleteAccess}" hasParentRecords="{!content.hasParentRecords}"
                previousPageAction="{!previousPage}" nextPageAction="{!nextPage}" goToPageAction="{!goToPageAction}" resetPageSizeAction="{!resetPageSize}" 
                readOnlyGridAction="{!readOnlyGridAction}" pageSize="{!pageSize}" pageSizeOptions="{!showRows}" showReadOnly="{!showReadOnly}" 
                isEditable="{!isEditable}" isCreateable="{!isCreateable}" noOfRecordsTxt="{!noOfRecordsTxt}" gridTitle="{!gridConfig.Name}" 
                pageNumbers="{!pageNumbers}" renderFirstPage="{!renderFirstPage}" goToPageSetter="{!goToPage}"
                firstPage="{!firstPageNumber}" renderNextPageLink="{!renderNextPageLink}" totalPages="{!totalPages}" currentPage="{!currentPage}" 
                massUpdatesEnabled="{!massUpdatesEnabled}" massCreatesEnabled="{!massCreatesEnabled}" UDFEnabled="{!UDFEnabled}" UDCEnabled="{!UDCEnabled}" exportEnabled="{!exportEnabled}" 
                lang="{!lang}" userHasGridWizardPerms="{!userHasGridWizardPerms}" savedFilterOptions="{!savedFilterOptions}"
                selectedFilterPicklistVal="{!selectedFilterPicklistVal}" gridController="{!gridController}"/>
            
            <apex:inputHidden id="modData" value="{!modData}"/>
            <apex:inputHidden id="newData" value="{!newData}"/>
            <apex:inputHidden id="parentIds" value="{!parentIds}"/>
            <apex:inputHidden id="child1Ids" value="{!child1Ids}"/>
            <apex:inputHidden id="child2Ids" value="{!child2Ids}"/>
            <apex:inputHidden id="child3Ids" value="{!child3Ids}"/>
            <apex:inputHidden id="child4Ids" value="{!child4Ids}"/>
            <apex:inputHidden id="sortParent" value="{!sortParent}"/>
            <apex:inputHidden id="sortChild1" value="{!sortChild1}"/>
            <apex:inputHidden id="sortChild2" value="{!sortChild2}"/>
            <apex:inputHidden id="sortChild3" value="{!sortChild3}"/>
            <apex:inputHidden id="sortChild4" value="{!sortChild4}"/>
            <apex:inputHidden id="expandCollapseState" value="{!expandCollapseState}"/>
            <apex:inputHidden id="userDefinedColumnOrder" value="{!userDefinedColumnOrder}"/>
            <apex:inputHidden id="expandGroupings" value="{!expandGroupings}"/>
            <apex:inputHidden id="showRecordDetails" value="{!showRecordDetails}"/>
            
            <script type="text/javascript">
                var modDataHidden = document.getElementById("{!$Component.modData}"),
                    newDataHidden = document.getElementById("{!$Component.newData}"),
                    parentIdsHidden = document.getElementById("{!$Component.parentIds}"),
                    child1IdsHidden = document.getElementById("{!$Component.child1Ids}"),
                    child2IdsHidden = document.getElementById("{!$Component.child2Ids}"),
                    child3IdsHidden = document.getElementById("{!$Component.child3Ids}"),
                    child4IdsHidden = document.getElementById("{!$Component.child4Ids}"),
                    sortParentHidden = document.getElementById("{!$Component.sortParent}"),
                    sortChild1Hidden = document.getElementById("{!$Component.sortChild1}"),
                    sortChild2Hidden = document.getElementById("{!$Component.sortChild2}"),
                    sortChild3Hidden = document.getElementById("{!$Component.sortChild3}"),
                    sortChild4Hidden = document.getElementById("{!$Component.sortChild4}"),
                    expandAllHidden = document.getElementById("{!$Component.expandCollapseState}"),
                    userDefinedColumnOrderHidden = document.getElementById("{!$Component.userDefinedColumnOrder}"),
                    expandGroupingsHidden = document.getElementById("{!$Component.expandGroupings}"),
                    showRecordDetailsHidden = document.getElementById("{!$Component.showRecordDetails}");
                    
            </script>
            
            <div id="newFieldInfo">
            <apex:repeat value="{!parentGrid.allGridInfo}" var="gInfo" rendered="{!isCreateable}">
                <table border="0" cellpadding="0" cellspacing="0" class="none apexFields" name="new_{!gInfo.id}">
                    <tr>
                    <apex:repeat value="{!gInfo.metaColumns}" var="metaCol" rendered="{!gInfo.isCreateable}">
                        <td name="v{!metaCol.colIndex}">
                        	<apex:inputField value="{!gInfo.newSObject[metaCol.fieldName]}" 
                        		rendered="{!!metaCol.isRestrictedPicklist && NOT(metaCol.isReadOnly) && metaCol.dataTypeStr != 'PICKLIST' && metaCol.dataTypeStr != 'MULTIPICKLIST'}" 
                        		required="false"/>
                        	
                        	<!-- special handling for picklists which should not use inputField due to SFDC behavior around controlling/dependent fields starting in API version 26 -->
                        	<apex:selectList value="{!gInfo.newSObject[metaCol.fieldName]}"
                                multiselect="{!metaCol.dataTypeStr == 'MULTIPICKLIST'}"
                                size="1" required="false" 
                                rendered="{!!metaCol.isRestrictedPicklist && NOT(metaCol.isReadOnly) && (metaCol.dataTypeStr == 'PICKLIST' || metaCol.dataTypeStr == 'MULTIPICKLIST')}" >
                                <apex:selectOptions value="{!metaCol.picklistValuesWithNoneOption}"/>
                            </apex:selectList> 	
                        </td>
                    </apex:repeat>
                    
                    <apex:repeat value="{!gInfo.requiredColumnsForCreate}" var="metaCol" rendered="{!gInfo.isCreateable}">
                        <td name="v{!metaCol.colIndex}"><apex:inputField value="{!gInfo.newSObject[metaCol.fieldName]}" rendered="{!!metaCol.isRestrictedPicklist}" required="false"/></td>
                    </apex:repeat>
                    </tr>
                </table>
            </apex:repeat>
            </div>
            
            <div class="none" id="objectTextAreaInfo">
                <c:EmptyComponent rendered="{!showReadOnly==false}">
                    <c:TextAreaHelperComponent gridInfo="{!parentGridInfo}" />
                    <c:TextAreaHelperComponent gridInfo="{!child1GridInfo}" />
                    <c:TextAreaHelperComponent gridInfo="{!child2GridInfo}" />
                    <c:TextAreaHelperComponent gridInfo="{!child3GridInfo}" />
                    <c:TextAreaHelperComponent gridInfo="{!child4GridInfo}" />
                </c:EmptyComponent>
            </div>
            
            <c:EmptyComponent rendered="{!UDCEnabled}">
                <div id="reorderCols" class="msgBox boxShadow reorderColsBox">
                    <div id="rocResizeDiv">
                        <div class="header">
                            <span class="title">Reorder and Hide Columns</span>
                            <span class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></span>
                            <br clear="all"/>
                        </div>
                        <div id="rocBtns">
                            <apex:commandButton action="{!saveUserDefinedColumns}" value="{!lang.saveBtnLbl}" 
                                                styleClass="gbBtn rocSaveBtn" immediate="false"/>
                            <input type="button" class="gbBtnDisabled none" value="{!lang.saveBtnLbl}" disabled="disabled" />
                            <input type="button" class="gbBtn rocRefreshBtn" value="{!lang.refreshBtnLbl}" />
                            <input type="button" class="gbBtnDisabled none" value="{!lang.refreshBtnLbl}" disabled="disabled" />
                            <c:EmptyComponent rendered="{!NOT(isLoadedFromDefaultColumnsRecord)}">
                                <apex:commandButton action="{!revertUserDefinedColumns}" value="{!lang.revertBtnLbl}" 
                                                    styleClass="gbBtn rocRevertBtn" title="Revert to the default column order" immediate="false"/>
                                <input type="button" class="gbBtnDisabled none" value="{!lang.revertBtnLbl}" disabled="disabled" />
                            </c:EmptyComponent>
                        </div>
                        <div id="rocBody">
                            <div>
                                <div><b>Reorder</b> columns by dragging and dropping them vertically.</div>
                                <div><b>Hide</b> columns by unchecking the boxes.</div><br/>
                            </div>
                            <div id="rocContent">
                            </div>
                        </div>
                    </div>
                </div>
            </c:EmptyComponent>
            <c:EmptyComponent rendered="{!exportEnabled}">
	            <apex:inputHidden id="exportIds" value="{!exportRecordIds}" />
	            <script type="text/javascript">
	                var exportIds = document.getElementById("{!$Component.exportIds}");
	            </script>
            </c:EmptyComponent>
            <c:EmptyComponent rendered="{!UDFEnabled}">
	            <apex:actionFunction name="refreshGridAfterUDFSaveJS" action="{!refreshGridAfterUDFSave}" rerender="messageBlock">
                </apex:actionFunction>
            </c:EmptyComponent>
        </apex:form>
        
        <c:EmptyComponent rendered="{!UDFEnabled}">
            <div id="userFilterBox" class="msgBox filterBox boxShadow">
                <div id="filterBoxResizeDiv">
                    <div class="header">
                        <span class="title">{!lang.UDFFilterBtnLbl}</span>
                        <span class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></span>
                        <br clear="all"/>
                    </div>
                    <div id="userFilterBoxContent" class="filterBoxContent frameScrollFix">
                        <div class="msgBox boxShadow loaderStatus" id="filterStatus">
                            <div class="msgBody">
                                <img src="{!URLFOR($Resource.gb_resources, 'images/orange_loader.gif')}" height="35" width="35" border="0"/>
                                <span class="msgText">{!lang.loadTxt}</span>
                            </div>
                        </div>
                        <iframe src="" id="userFilterFrame" scrolling="auto" height="100%" width="100%" frameborder="0"></iframe>
                    </div>
                </div>
            </div>
        </c:EmptyComponent>
        
        <div id="fastFilter" class="msgBox boxShadow">
            <div class="header">
                <span class="title">{!lang.fastFiltersTitle}</span>
                <span class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></span>
                <br clear="all"/>
            </div>
            <div class="ffContent" >  
                <div id="sortBody"></div>                
                <div id="ffBody">
					<div class="caHeader" title="{!lang.fastFilterSectionHeaderTitle}">
					    <span class="icon-filter"></span>
					    <span>Filter</span>
					    <span id="ffBtns">
					        <input class="gbBtn ffApplyNowBtn" title="{!lang.fastFilterApplyNowBtnTitle}" type="button" value="{!lang.applyBtnLbl}" />
					        <input class="gbBtn ffClearBtn" title="{!lang.fastFilterClearBtnTitle}" type="button" value="{!lang.clearBtnLbl}" />
					    </span>
					</div>	
				    <div class="caContent">
					    <div id="ff-msg"></div>
					    <div id="ff-field"></div>
					    <div id="ff-operator"></div>
					    <div id="ff-value"></div>
                    </div>
                </div>
                <div id="muBody"></div>
                <div id="hideBody"></div>
                <input type="hidden" id="ff-obj" value="" />
                <input type="hidden" id="ff-obj-grid-format" value="" />
                <input type="hidden" id="ff-field-api-name" value="" />
            </div>
        </div>
        <!-- Export Widget  -->
        <c:EmptyComponent rendered="{!exportEnabled}">
        	<div id="exportBox" class="msgBox boxShadow exportBox">
        		<div id="exportBoxResizeDiv">
        			<div class="header">
			            <span class="title">{!lang.exportWidgetTitle}</span>
			            <span class="closeX">{!lang.CloseWarningBoxLbl}&nbsp;<b>X</b></span>
			            <br clear="all"/>
			        </div>
			        <div id="exportBoxContent" class="frameScrollFix boxContent">
			        	<div class="msgBox boxShadow loaderStatus" id="exportStatus">
				            <div class="msgBody">
				                <img src="{!URLFOR($Resource.gb_resources, 'images/orange_loader.gif')}" height="35" width="35" border="0"/>
				                <span class="msgText"></span>
				            </div>
				        </div>
        				<iframe src="" id="exportFrame" scrolling="auto" height="100%" width="100%" frameborder="0"></iframe>
        			</div>
        		</div>	
        	</div>
        </c:EmptyComponent>       
        <div class="gbCopyright">{!lang.CopyrightTxt}</div>
    </div>
    
    <c:LangJSComponent lang="{!lang}"/>
    <!--  do not use includeScript for the jquery include, as this will add the javascript to the <head> tag and slow down the page load -->
    <apex:repeat value="{!JSFileNames}" var="fName">
        <script type="text/javascript" src="{!URLFOR($Resource.GBLite__gb_resources, fName)}"></script>
    </apex:repeat>
	<!-- chart component must come after the JS includes 
		don't specify sfname param, it might not be present in which case the last access filter will be automatically picked up
	-->
    <c:ChartComponent rendered="{!showCharts}" standalone="false" gridName="{!gridConfig.Name}" 
		recordId="{!$CurrentPage.parameters.id}" fpf="{!$CurrentPage.parameters.fpf}" fpv="{!$CurrentPage.parameters.fpv}" uniqueChartNumber="0"/>
    
    <c:ServiceCloudConsoleComponent inServiceCloudConsole="{!inServiceCloudConsole}"/>
    <apex:repeat value="{!CSSFileNames}" var="fName">
        <apex:stylesheet value="{!URLFOR($Resource.GBLite__gb_resources, fName)}"/>
    </apex:repeat>
    
    <script type="text/javascript">
        var gridIsValid = {!isValidGrid},
            readOnlyGrid = {!showReadOnly},
            isCreateable = {!isCreateable},
            currentLocale = '{!localeForDate}',
            dateFormat = '{!dateFormat}', // used by date js
            gridHasEditableDates = {!parentGrid.gridHasEditableDateFields && !showReadOnly},
            gridHasAnyDates = {!parentGrid.gridHasAnyDateFields},
            deletesEnabled = {!deletesEnabled},
            massUpdatesEnabled = {!massUpdatesEnabled},
            exportEnabled = {!exportEnabled},
            filterEnabled = {!UDFEnabled},
            filteringByParent = {!isFilteringByParentId},
            expandAll = '{!expandAll}',
            showBottomButtons = {!showBottomButtons},
            ownerValue = '{!ownerValueForCreateNew}',
            ownerId = '{!$User.Id}',
            profileId = '{!profileId}', // used by custom js
            profileId15Char = '{!LEFT(profileId, 15)}', // used by custom js
            userFilterURL = '{!userFilterUrl}',
            gridExportURL = '{!gridExportUrl}',
            filterParentField = '{!FPFOnParentObject}',
            optsArr,
            ffOpts = {!operatorsJSON},
            multiCurrency = {!isMultiCurrencyOrg},
            defaultIsoCode = "{!defaultIsoCode}",
            defaultIsoCodeForOrg = "{!defaultCurrencyISOCodeForOrg}",
            sId = "{!$Api.Session_ID}",
            serverUrl160 = "{!$Api.Partner_Server_URL_160}",
            loaderImg = "{!URLFOR($Resource.gb_resources, 'images/orange_loader.gif')}",            
            localeDigitSep = "{!localeDigitSeparator}",
            localeDecimalSep = "{!localeDecimalSeparator}",
            repeatParentHeader = {!repeatParentHeader},
            compactView = {!compactView},
            showGroupingsExpanded = {!showGroupingsExpanded},
            showRecordDetailsInGroup = {!showRecordDetailsInGroup},
            gridNameForUDF = '{!gridConfig.Name}',
            filterNameParam = '{!filterNameParam}',
            isInMobileDevice = {!isInMobileDevice},
            isInMobileView = {!isInMobileView},
			paramsToRemove = {!paramsToRemoveSavedFilterOnChange},
            lookupArrowHoverText = '{!lookupArrowHoverText}',
            defaultRecordTypeIds = {!objNameToDefaultRtJSON},
            objectRecordTypeIdToNames = {!objRtIdToNameJSON},
            lookupResultSizeMax = {!lookupResultSizeMax},
            isDefaultFilterLoaded = {!isDefaultFilterLoaded},
            isAdminFilterLoaded = {!isAdminFilterLoaded},
            inCommunities = {!inCommunities},
            baseRelativeURL = '{!baseRelativeURL}',
            baseRelativeURLForVFManaged = '{!baseRelativeURLForVFManaged}',
            lookupAjaxResponderPageURL = '{!lookupAjaxResponderPageURL}',
            gw1URL = '{!IF(userHasGridWizardPerms, gridWizard1URL, '')}',
            gw2URL = '{!IF(userHasGridWizardPerms, gridWizard2URL, '')}',
            gw3URL = '{!IF(userHasGridWizardPerms, gridWizard3URL, '')}',
            objectNameToNameField = {!objectNameToNameField},
            colorCodingRulesJson = {!colorCodingRulesJson},
            objectNameToAggregateResults = {!objectNameToAggregateResults},
            firstGridRow = {!firstRowFromUrlOrDefault},            
            isTrackingDisabled = {!isTrackingDisabled},
            orgId = '{!$Organization.Id}',
            gridBuddyVersion = '{!gridBuddyVersion}',
            abbreviatedUserType = '{!abbreviatedUserType}',
            mpToken = '{!mpToken}',
            uiTheme = '{!$User.UITheme}',
            userId = '{!$User.Id}',
            gbEdition = '{!gridBuddyEditionName}';
        
        if (gridIsValid && {!(showHeader==false)}) {
            try {
                document.title = "{!gridWindowTitle}";
            } catch(e) {}
        }
        
        <apex:repeat value="{!parentGrid.allGridInfo}" var="gInfo">
            gridInfoMapId = '{!gInfo.id}';
            gridInfoMap[gridInfoMapId] = new GridInfo(gridInfoMapId, {!gInfo.rowCnt}, '{!gInfo.HTMLEscapedGridObjectName}', '{!gInfo.HTMLEscapedGridObjectPluralName}', '{!gInfo.fullyQualifiedObjectName}', '{!gInfo.sortFieldNames}', '{!gInfo.sortDirections}', '{!gInfo.defaultSortFieldNames}', {!gInfo.isDeletable}, {!gInfo.isCreateable}, {!gInfo.isUpdateable}, {!gInfo.supportsUserDefinedFilters}, {!gInfo.groupByFields}, '{!gInfo.objectDotFkNameInGWFormat}');
            gridInfoMapLen++;
            
            <apex:repeat value="{!gInfo.metaColumns}" var="metaCol">
                optsArr = [];
                <apex:repeat value="{!metaCol.HTMLEscapedPicklistValues}" var="picklistValue">
                    optsArr.push({v:"{!picklistValue.value}", l:"{!picklistValue.label}"});
                </apex:repeat>
                
                gridInfoMap[gridInfoMapId].addMetaCol({!metaCol.colIndex}, "{!metaCol.fieldName}", "{!metaCol.HTMLEscapedFieldLabel}", "{!metaCol.dataTypeStr}", {!metaCol.isReadOnly}, optsArr, {!metaCol.isRequired}, {!metaCol.fieldLength}, '{!metaCol.referenceToObjectsAsString}', {!metaCol.isCreateable}, {!metaCol.isDefaultedOnCreate}, {!metaCol.isUpdateable}, {!metaCol.isSortable}, {!metaCol.isHtmlFormatted}, {!metaCol.isFilterable}, {!metaCol.isHidden}, {!metaCol.columnWidth}, '{!metaCol.summaryType}', '{!metaCol.aggregateAlias}', '{!metaCol.groupByAlias}', '{!metaCol.groupingFunctionAlias}', '{!metaCol.scale}', {!metaCol.isAggregable});
            </apex:repeat>
            
            <apex:repeat value="{!gInfo.requiredColumnsForCreate}" var="metaCol">
                optsArr = [];
                <apex:repeat value="{!metaCol.HTMLEscapedPicklistValues}" var="picklistValue">
                    optsArr.push({v:"{!picklistValue.value}", l:"{!picklistValue.label}"});
                </apex:repeat>
                
                gridInfoMap[gridInfoMapId].addRequiredMetaCol({!metaCol.colIndex}, "{!metaCol.fieldName}", "{!metaCol.HTMLEscapedFieldLabel}", "{!metaCol.dataTypeStr}", {!metaCol.isReadOnly}, optsArr, {!metaCol.isRequired}, {!metaCol.fieldLength}, '{!metaCol.referenceToObjectsAsString}', {!metaCol.isCreateable}, {!metaCol.isDefaultedOnCreate}, {!metaCol.isUpdateable}, false, false, {!metaCol.isFilterable}, false);
            </apex:repeat>
        </apex:repeat>
        
        <apex:repeat value="{!recordTypePicklistData}" var="rtEntry">
            rtPicklistMap['{!rtEntry.objectDotField}'] = {!rtEntry.jsonString};
        </apex:repeat>

        <apex:repeat value="{!parentGrid.whoIdActivityObjects}" var="obj">
            whoIdActivityObjects.push(new Option("{!obj.label}", "{!obj.value}"));
        </apex:repeat>
        
        <apex:repeat value="{!parentGrid.whatIdActivityObjects}" var="obj">
            whatIdActivityObjects.push(new Option("{!obj.label}", "{!obj.value}"));
        </apex:repeat>
        
        try {
            if (gridIsValid) {
                // parse the json
                gridData = {!IF(ISNULL(parentGrid), 'null', parentGrid.gridDataAsJSONString)};
                GBUnrelated.init(
                	{!IF(ISNULL(parentGrid), 'null', parentGrid.unrelatedParentIdToChildIds)}, 
                	{!IF(ISNULL(relationshipsMap), 'null', relationshipsMap)}
                );
                GBActions.setCustomActions({!actionDataJSON});

                updatedRecs = {!IF(ISNULL(pendingUpdatedRecsJSON), '{}', pendingUpdatedRecsJSON)};
                insertedRecs = {!IF(ISNULL(pendingInsertedRecsJSON), '{}', pendingInsertedRecsJSON)};
                
                GBLookupHelper.objectToNameFieldLabel = {!objectToNameFieldJSON};
                
                GBRowHelper.setCurrencySymbolMap({!isoCodeToSymbol});
            }
        } catch(e) {
            addPageLevelErrorMessage('<div><b>{!lang.UnableToLoadGridMsg}</b><br/>' + e + '</div>');
        }
        var dependentInfoArray = [];
        <apex:repeat value="{!DependentPicklistData}" var="pickListInfo">
            dependentInfoArray.push({parentObjectName: "{!pickListInfo.parentObjectName}", controllingField: "{!pickListInfo.controllingField}", dependentField: "{!pickListInfo.dependentField}", dependentValues: {!pickListInfo.dependentValues}});
        </apex:repeat>
    </script>

    <c:EmptyComponent rendered="{!NOT(ISNULL(customJSBody))}">
        <script type="text/javascript">
            {!customJSBody}
        </script>
    </c:EmptyComponent>
    <div id="gbOverlay">&nbsp;</div>
    <apex:outputText value="{!bodyEndTag}" escape="false"/>
</apex:page>